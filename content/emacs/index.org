#+title: Fun with Emacs

* 各种文章
- [[https://emacs.stackexchange.com/questions/56230/when-use-setq-or-set][When use setq or set ']]
- [[https://nullprogram.com/blog/2017/01/30/][How to Write Fast(er) Emacs Lisp]]
* 中文断行
  启用 auto-fill 模式后，中文断行在导出时会出现空格，就先直接抄人家的
  代码啦：[[https://github.com/hick/emacs-chinese#%E4%B8%AD%E6%96%87%E6%96%AD%E8%A1%8C][Emacs相关中文问题以及解决方案]]。

  一开始用的 Feng Shu 的版本，但发现中文和代码块之间空格会消失，于是就
  换成 zwz 实现了。

  #+BEGIN_SRC elisp
    ;;; 下面一段是 zwz 的, 作者声明只适应 org-mode 8.0 以及以上版本
    (defun clear-single-linebreak-in-cjk-string (string)
      "clear single line-break between cjk characters that is usually soft line-breaks"
      (let* ((regexp "\\([\u4E00-\u9FA5]\\)\n\\([\u4E00-\u9FA5]\\)")
             (start (string-match regexp string)))
        (while start
          (setq string (replace-match "\\1\\2" nil nil string)
                start (string-match regexp string start))))
      string)

    (defun ox-html-clear-single-linebreak-for-cjk (string backend info)
      (when (org-export-derived-backend-p backend 'html)
        (clear-single-linebreak-in-cjk-string string)))

    (add-to-list 'org-export-filter-final-output-functions
                 'ox-html-clear-single-linebreak-for-cjk)
  #+END_SRC

* 关于 Code Block 的一些小技巧 - [[https://orgmode.org/guide/Working-with-Source-Code.html][Working with Source Code]]
  Use =C-c '= to edit the current code block. It opens a new major
  mode edit buffer containing the body of the source code block, ready
  for any edits. Use =C-c '= again to close the buffer and return to
  the Org buffer (this saves editing results); or use =C-c C-k= to
  abort editing and discard results.

* 各种文件操作
** Concat file name without =concat=
   [[https://www.reddit.com/r/emacs/comments/umb24/expandfilename_is_good_for_path_concat_too/][=expand-file-name= is good for path concat too]]

   When joining file paths, use =expand-file-name= instead of concat.

   #+BEGIN_SRC elisp :exports both
     (expand-file-name "eserver" "/home/user/")
   #+END_SRC

   评论区还有更棒的 trick 😁：
   #+BEGIN_SRC elisp :exports both
     (require 'cl-lib)
     (defun concat-path (&rest parts)
       (cl-reduce (lambda (a b)
                    (expand-file-name b a))
                  parts))
     (concat-path "/home/user" "eserver" "blog")
   #+END_SRC

   不过 =expand-file-name= 只适合绝对路径，在 [[https://stackoverflow.com/questions/3964715/what-is-the-correct-way-to-join-multiple-path-components-into-a-single-complete][What is the correct way
   to join multiple path components into a single complete path in
   emacs lisp?]] 里有关于 =concat=, =expand-file-name=, 还有 =f.el= 里
   =f-join= 的讨论（懒得看了😜
** Check for file existence
   [[https://emacs.stackexchange.com/questions/34392/how-to-check-if-a-directory-exists-in-elisp][How to check if a directory exists in elisp?]]

   - =file-exists-p FILENAME= :: Return =t= if file =FILENAME= exists
     (whether or not you can read it).
   - =file-directory-p FILENAME= :: Return =t= if =FILENAME= names an
     *existing* directory.


   #+BEGIN_SRC elisp
     (defun directory-non-hidden-files (directory)
       "Return absolute path of all non-hidden & non-backup files in DIRECTORY.
     This does not opreate recursively. Only files / directories under the current
     directory is shown."
       ;; 如过再对结果都来个 file-direcotry-p 就可以返回文件夹啦
       (directory-files directory t
                        ;; dircard ".", "..", hidden, and emacs-backup files
                        (rx string-start (not ?.) (* anything) (not ?~) string-end)))
   #+END_SRC

* XML Parsing

[[https://www.emacswiki.org/emacs/XmlParsers][各种 XML Parser]]，还有 =xml.el= 的[[https://www.emacswiki.org/emacs/XmlParserExamples][例子]]，这里就介绍一下 =xml.el= 吧：

=xml.el= 主要有两个函数： =xml-parse-file= 和 =xml-parse-region= ，它
们会返回一个 XML parse tree，格式如下：

#+begin_src text
  xml-list   ::= (node node ...)
  node       ::= (qname attribute-list . child_node_list)
  child_node_list ::= child_node child_node ...
  child_node ::= node | string
  qname      ::= (:namespace-uri . "name") | "name"
  attribute_list ::= ((qname . "value") (qname . "value") ...)
                     | nil
  string     ::= "..."
#+end_src

The XML parse tree xml-list is a list of nodes, where each node is
made up of _its name, alist of attributes, and child nodes_. A child
node can either be _a string or a new node_.

Here's a XML example:
#+begin_src xml
  <post time="20050716234509" id="010101">
    <login>Test</login>
    <msg>Here is the message</msg>
    <info>My UA</info>
  </post>
#+end_src

Here's code to parse it:

#+begin_src elisp
  (let* ((xml "<post time=\"20050716234509\" id=\"010101\">
                 <login>Test</login>
                 <msg>Here is the message</msg>
                 <info>My UA</info>
               </post>")
         (root (with-temp-buffer
                 (insert xml)
                 (xml-parse-region)))
         (post  (car root))
         (attrs (xml-node-attributes post))
         (time  (cdr (assq 'time attrs)))
         (msg   (car (xml-get-children post 'msg)))
         (text  (car (xml-node-children msg))))
    (message "time: %s, message '%s'" time text))
#+end_src

#+begin_src elisp
  "time: 20050716234509, message ’Here is the message’"
#+end_src

Within =let*=, =root= is a list of a single =post= node:

#+begin_src elisp
  ((post ((time . "20050716234509") (id . "010101"))
         "\n               "
         (login nil "Test")
         "\n               "
         (msg nil "Here is the message")
         "\n               "
         (info nil "My UA")
         "\n             "))
#+end_src

Here, =((time . "20050716234509") (id . "010101"))= is the attribute
alist , and the rest, both strings & nodes, are child nodes of =post=.
The attribute list =attr= is extracted with =xml-node-attributes=, you
can also get a certain attribute with =xml-get-attribute= &
=xml-get-attribute-or-nil=.

#+begin_src elisp
  (xml-get-attribute post 'time)
#+end_src

#+begin_src elisp
  "20050716234509"
#+end_src

=xml-node-children= & =xml-get-children= return either all children,
or children matching a specific name:

#+begin_src elisp
  (xml-get-children post 'msg)
#+end_src

#+begin_src elisp
  ;;; only children named msg
  ((msg nil "Here is the message"))
#+end_src

#+begin_src elisp
  (xml-node-children post)
#+end_src

#+begin_src elisp
  ;;; a list of all children under post
  ("\n                 "
   (login nil "Test")
   "\n                 "
   (msg nil "Here is the message")
   "\n                 "
   (info nil "My UA")
   "\n               ")
#+end_src

* 绑定 80 口

[[https://superuser.com/questions/710253/allow-non-root-process-to-bind-to-port-80-and-443][Allow non-root process to bind to port 80 and 443?]]

基本就是安装 =authbind=​，然后去 =/etc/authbind/byport/= 里面建一个以端
口号命名的文件（比如 =/etc/authbind/byport/80=​），当前用户对其要有
execute 权限，最后用 =authbind= 来启动命令即可。

* 定时更新并重启 EServer

感觉还是tmux最方便,直接一个shell脚本就行了:
#+begin_src shell
  while true; do
      ./update.sh
      ./restart-server.sh
      sleep 3600
  done
#+end_src
