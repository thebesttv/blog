#+title: Chapter 3 --- Modularity, Objects, and State

#+begin_quote
Indeed, the view that a system is composed of separate objects is most
useful when the state variables of the system can be grouped into
_closely coupled subsystems_ that are only _loosely coupled to other
subsystems_.
#+end_quote

* Encapsulation

#+begin_src scheme
  (define withdraw
    (let ([balance 100])
      (lambda (amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficent funds."))))

  (withdraw 25)                           ; 75
  (withdraw 25)                           ; 50
  (withdraw 100)                          ; "Insufficent funds."
  (withdraw 15)                           ; 35
#+end_src

#+begin_quote
In programming-language jargon, the variable =balance= is said to be
/encapsulated/ within the =withdraw= procedure.  Encapsulation
reflects the general system-design principle known as the /hiding
principle/: One can make a system more modular and robust by
protecting parts of the system from each other; that is, by providing
information access only to those parts of the system that have a "need
to know."
#+end_quote

* Monte Carlo method

Cesaro's method for estimating $\pi$: $6/\pi^2$ is the probability
that two integers chosen at random will have no factors in common,
that is, for any random integer $x, y \in \mathbb{R}$,
\[ \text{Prob}( \gcd (x, y) = 1 ) = \frac{6}{\pi^2}. \]

#+begin_src scheme
  (define (estimate-pi n)
    (sqrt (/ 6 (monte-carlo n cesaro))))

  (define (cesaro)
    (= (gcd (rand) (rand)) 1))

  (define (monte-carlo trials experiment)
    (define (loop remaining passed)
      (if (zero? remaining)
          (/ passed trials)
          (loop (- remaining 1)
                (+ passed (if (experiment) 1 0)))))
    (loop trials 0))

  (define rand
    (let ([m (expt 2 32)])
      (lambda ()
        (random m))))

  (estimate-pi 100000)                    ; 3.1428002736524316
#+end_src

* Inadequacy of the substitution model

#+begin_quote
The trouble here is that substitution is based ultimately on the
notion that _the symbols in our language are essentially *names for
values*_.  But as soon as we introduce =set!= and the idea that the
value of a variable can change, _a variable can no longer be simply a
name_.  Now a variable somehow refers to a *place* where a value can
be stored, and the value stored at this place can change.  In Section
3.2 we will see how /environments/ play this role of "place" in our
computational model.
#+end_quote

* Bank account example

From Ex 3.3, 3.4, 3.7.

=make-account= takes as arguments balance and password, then returns a
password protected account.  Any account =acc= is a procedure that
takes a password and a command, then returns a procedure that does the
command if the password is correct.  More than 3 failed attempts will
alert the cops.
#+begin_src scheme
  (define (make-account balance password)
    (let ([threshold 3]                   ; at most 3 attemts
          [wrong-attempts 0])
      (define (withdraw amount)
        (if (>= balance amount)
            (begin (set! balance (- balance amount))
                   balance)
            "Insufficent funds."))
      (define (deposit amount)
        (set! balance (+ balance amount))
        balance)
      (define (call-the-cops)
        "Wii Wuu, Wii Wu")
      (define (incorrect-pwd . args)
        (set! wrong-attempts (1+ wrong-attempts))
        (if (> wrong-attempts threshold)
            (call-the-cops)
            "Incorrect password!"))
      (define (dispatch pwd cmd)
        (if (not (eq? pwd password))
            incorrect-pwd
            (begin
              (set! wrong-attempts 0)
              (cond [(eq? cmd 'withdraw) withdraw]
                    [(eq? cmd 'deposit)  deposit]
                    [else (error "Wrong command.")]))))
      dispatch))

  (define acc (make-account 100 'thebesttv))
  ((acc 'thebesttv 'withdraw) 20)         ; 80
  ((acc 'what? 'deposit) 20)              ; "Incorrect password!"
  ((acc 'what? 'deposit) 20)              ; "Incorrect password!"
  ((acc 'what? 'deposit) 20)              ; "Incorrect password!"
  ((acc 'what? 'deposit) 20)              ; "Wii Wuu, Wii Wu"
#+end_src

#+begin_quote
Consider the bank account objects created by =make-account=, with the
password modification described in Exercise 3.3.  Suppose that our
banking system requires the ability to make joint accounts.  Define a
procedure =make-joint= that accomplishes this.  =make-joint= should
take three arguments.  The first is a password-protected account.  The
second argument must match the password with which the account was
defined in order for the =make-joint= operation to proceed.  The third
argument is a new password.  =make-joint= is to create an additional
access to the original account using the new password.  For example,
if =peter-acc= is a bank account with password =open-sesame=, then
#+begin_src scheme
  (define paul-acc
    (make-joint peter-acc 'open-sesame 'rosebud))
#+end_src
will allow one to make transactions on =peter-acc= using the
name =paul-acc= and the password =rosebud=.
#+end_quote

#+begin_src scheme
  (define (make-joint account old-pwd new-pwd)
    (lambda (pwd cmd)
      (if (not (eq? pwd new-pwd))
          (lambda () "Incorrect password!")
          (account old-pwd cmd))))

  (define acc1 (make-account 100 'thebesttv))

  ((acc1 'thebesttv 'withdraw) 20)        ; 80

  (define acc2 (make-joint acc1 'thebesttv 'lalala))

  ((acc2 'lalala 'withdraw) 20)           ; 60
  ((acc1 'thebesttv 'withdraw) 20)        ; 40
#+end_src
