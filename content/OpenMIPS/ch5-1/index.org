#+title: Ch5 上 --- Data Hazard 的解决

采用数据前推(forwarding)解决 data hazard:

#+caption: 加了数据前推的流水线
{{{image(100)}}}
[[./pipeline.jpg]]

#+caption: 模块接口及关系
{{{image(100)}}}
[[./modules.jpg]]

相对于第四章, EX 和 MEM 阶段都有数据线将 =wdata=, =wd=, =wreg= 写回 ID
的两个操作数中.  也就是说 =id= 要添加六个输入: =ex_wreg_i=, =ex_wd_i=,
=ex_wdata_i=, =mem_wreg_i=, =mem_wd_i=, =mem_wdata_i=.  当然, 调用
=id= 的 =openmips= 也要改一下.
#+include: "id.v" src verilog
#+include: "openmips.v" src verilog

用这样一个程序测试一下 Data Hazard 的解决, 其中每条指令都依赖之前甚至
再之前的 =$1=:
#+include: "inst_rom.s" src mips

如果是第四章的最简实现, 就会产生各种问题:
{{{image(100)}}}
[[./waveform-with-hazard.png]]

第一个指令 I1 的结果是正常的, 但第二个指令 I2 在ID给EX的操作数是 =$1=,
而此时 =$1= 还没被写回, 就出问题了.  I3 与 I1 间隔一个指令也会出问题.
只有到最后的 I4, 由于在 =regfile= 中已经处理了间隔两个指令的 Data
Hazard, 所以 I4 的结果中只有 I1 和 I4 自己, 而没有 I2 和 I3.

然后是修改的, 可以看到莫得问题😁:
{{{image(100)}}}
[[./waveform-hazard-resolved.png]]
