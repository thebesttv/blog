#+title: Ch5 --- 指令系统

* 指令

- 长度
  - 单字长指令
  - 双字长指令
- 地址数
  - 三地址
  - 二地址: =OP A1 A2=
    - 存储器---存储器型 (S---S型)
    - 寄存器---寄存器型 (R---R型)
    - 寄存器---存储器型 (R---S型)
  - 单地址
  - 零地址

* 扩展操作码的方法

Ex. 设机器指令字长为16位, 指令中地址字段的长度为4位, 共有11条三地址指
令, 72条二地址指令, 64条零地址指令.  问最多还能规定多少条一地址指令?

设有 $x_3 = 11$ 条三地址指令, $x_2 = 72$ 条二地址, $x_1$ 条一地址,
$x_0 = 64$ 条零地址. 指令分为 $m_3 = m_2 = m_1 = m_0 = 4$, 四块.

\[\begin{align*}
  \Bigl(\bigl(\left(2^{m_3} - x_3 \right) 2^{m_2} - x_2 \bigr)
    2^{m_1} - x_1 \Bigr) 2 ^{m_0} - x_0 &= 0 \\
  \Bigl(\bigl(\left(16 - 11 \right) 16 - 72 \bigr) 16 - x_1 \Bigr)
    16 - 64 &= 0 \\
  x_1 &= 124 \\
\end{align*}\]

* 寻址方式

形式地址 A, 有效地址 EA, 操作数 Data = (EA).

重点: 地址的个数 & 每个地址的指向(寄存器还是内存).

** 立即(数)寻址

没有地址, 操作数直接写在指令中.

Data = A

#+begin_src asm
  MOV AX, 2000H
#+end_src

** 直接寻址

一个内存的地址, 写在指令中.
#+begin_verse
EA = A
Data = (EA) = (A)
#+end_verse

#+begin_src asm
  MOV AX, [2000H]
#+end_src

** (一级)间接寻址

两个内存的地址, 一个在指令中, 另一个在内存中.
#+begin_verse
EA = (A)
Data = (EA) = ((A))
#+end_verse

#+begin_src asm
  MOV AL, @2000H ; 假想?
#+end_src

** 寄存器(直接)寻址

一个地址, 不过是寄存器的地址, 写在指令中.
#+begin_verse
EA = R_i
Data = (EA) = (R_i)
#+end_verse

与直接寻址类似, 也是给出一个地址, 但给的是寄存器的地址, 而非内存地址.
由于一次访问的是寄存器而非内存, 比直接寻址快.

#+begin_src asm
  MOV AX, BX
#+end_src

** 寄存器间接寻址

两个地址, 一个寄存器的地址, 写在指令中; 另一个内存地址, 在指令指向的寄
存器中.
#+begin_verse
EA = (R_i)
Data = (EA) = ((R_i))
#+end_verse

#+begin_src asm
  MOV AL, [BX]
#+end_src

** 变址寻址

两个地址和一个立即数: 其中一个地址是寄存器的地址, 寄存器内容与立即数相
加得到另一个地址, 是指向内存的.
#+begin_verse
EA = (R_i) + imm
Data = (EA) = ((R_i) + imm)
#+end_verse

#+begin_src asm
  MOV AL, [SI+4]
#+end_src

- =(R1)+=: 自增型变址寻址. 后置自增, EA = R_1
- =-(R1)=: 自减型变址寻址. 前置自减, EA = R_1 \minus 1

所谓​*变址*​, 意味着大多数情况下, 寄存器的内容会改变, 在这一般是自增或自
减.  因此变址寻址一般用于循环, 字符串, 或向量计算中.  这解决了
iteration 的问题.

** 相对寻址

相对于PC的寻址, PC一般为当前指令的下一条指令的地址.
#+begin_verse
EA = (PC) + imm = K+1 + imm
#+end_verse

一般用于指令的跳转.

** 基址寻址

和变址寻址很像, 但不是寄存器的地址, 而是​*基址寄存器(base register)*​的
地址.  而所谓​*基址*​, 代表着基址寄存器一般不会改变.  这解决了 relocate
的问题.

** 基址加变址寻址

就是一个会自增自减的寄存器 + 基址寄存器 + 立即数, 这样既解决了
relocate 的问题, 也方便了iteration.  我愿称之为 relocatable &
iterable. 😉
