#+title: 人机交互笔记
* Ch1 --- 概述
* Ch2 --- 人机交互基础知识
** 交互框架
*** *执行/评估活动周期 EEC* 🧐 (p20)

Donald Norman 提出 Execution-Evaluation Cycle.

将活动定义为四个基本组成部分:
- 目标: 想做什么, 最重要的
- 执行: 实现目标必须进行的操作
- 评估: 衡量执行结果与目标之间的差距
- 客观因素: 执行活动时必须考虑的客观条件

{{{image(50)}}}
[[./notes/eec.png]]

七个阶段, 2-4为执行, 5-7为评估
1. 建立目标: 用户计划完成的事情
2. 形成操作意图: 目标转化为明确的操作意图
3. 明确动作序列
4. 执行动作
5. *感知*​系统状态
6. *解释*​系统状态
7. 对照目标系统​*评估*​状态

#+begin_details 举例
为说明上述循环过程，Norman列举了如下例子：设想夜晚来临时你想要看书，但
发现室设内光线不够，需要再亮一些，于是你就建立了将光线调得再亮一点的目
标。
- 为实现这一目标，你形成了打开电灯的意图，并确定了所需执行的动作: 走到
  台灯前和按台灯开关。
- 如果恰好台灯旁有其他人，你可能就会形成请他人帮你开灯的意图。

此时尽管你的目标并没有发生改变，但是意图和动作都有所不同了。当动作执行
完成后，灯亮了或没有亮，你都会用自己的知识去进行解释：如果灯没有亮，你
可能会想是由于灯泡坏了，或者电源开关没有接好。于是你会形成新的目标来解
决这一问题；如果灯泡亮了，你会按照原有目标对新状态进行评估，即“现在的
亮度可以满足需要吗”？如果答案是可以，则循环结束；否则，你还可能形成新
的意图，比如换一个房间或者把天花板上的电灯也打开等。
#+end_details

- 执行(时的)隔阂: 用户为达到目标而制定的动作与系统允许的动作之间的差别.
- 评估(时的)隔阂: 系统状态的实际表现与用户预期之间的差别.


#+begin_red
Norman模型不能描述人与系统通过​*界面*​进行的通信.
#+end_red

*** 扩展EEC框架 ??? (p21)

扩展EEC, 形成交互框架.

交互系统主要包括四个部分:
- 系统 S
- 用户 U
- 输入 I
- 输出 O

{{{image(60)}}}
[[./notes/extended-eec.png]]

执行阶段:
- 定义: 用户为达到目标而制定的任务需要使用输入语言进行定义
- 执行: 输入语言被转换成内核语言,表示系统将要执行的操作
- 表现: 系统使用输出语言把内核语言的执行结果表示出来
- 设计人员应保证从输入到系统的翻译是容易的

评估阶段
- 观察: 用户将输出与原有目标进行比较从而评估交互结果。

** 交互形式

WIMP: Window, Icon, Menu, Pointer

*** 命令行
*** 菜单驱动
*** 基于表格
*** 直接操纵 / 图标界面

直接操纵分为三个阶段:
- 自由阶段---指用户执行操作​*前*​的屏幕视图
- 捕获阶段---在用户动作(点击、点击拖拽等)执行过程​*中*​屏幕的显示情况
- 终止阶段---用户动作执行​*后*​屏幕的显示情况

*** 问答界面 Wizard

适合新手小白

*** 隐喻界面

隐喻(Metaphor):
- 本质: 在用户已有知识的基础上建立一组新的知识, 实现界面视觉提示和系统功
  能之间的知觉联系, 进而帮助用户从新手用户转变为专家用户.
- 优点: 直观生动, 无需学习
- 局限性:
  - 不具有可扩展性
  - 不同用户对同一事物可能产生不同的联想(cultural bias)
  - 紧紧地将我们的理念和物理世界束缚在一起
  - 寻找恰当的隐喻可能存在困难

*** 自然语言交互

** 理解用户 🧐
*** 信息处理模型 🧐
*** 认知心理学

格式塔心理学
- 相近性原则: 空间靠近
- 相似性原则: 外观相似, 用不同的来突出
- 连续性原则: 共线&相同方向, 对齐
- 完整性和闭合性原则
- 对称性原则
- 前景和背景

*** 人的认知特性

- 感觉记忆: 瞬时记忆, 持续1s
- 短时记忆: 由感觉记忆编码后形成, 持续30s.
  短时记忆的存储能力约为7\pm2个信息单元.

  7\pm2 理论:
  - 设计界面时要尽可能​*减小对用户的记忆需求*,
  - 同时可考虑通过将信息放置于一定的​*上下文*​中, 来减少信息单元的数目.

- 长时记忆: 由短时记忆经过进一步加工形成, 容量几乎无限.

  只有与长时记忆区的信息具有某种联系的新信息才能够进入长时记忆.

  启发: 注意使用​*线索*​来​*引导*​用户完成特定任务
- 遗忘: 长时记忆中的信息有时候无法提取, 但不代表长时记忆区中的信息丢失
  了.
#+begin_box 7±2理论
George Miller的7\pm2理论一经出现，就对交互设计产生了非常重大的影响。它
使得许多交互设计人员坚信，界面上菜单中最多只能有7个选项，工具栏上只能
显示7个图标，诸如此类。实际上他们忽视了这样一个事实，即无论菜单或是图
标都是可以浏览的，用户在选择一个想要执行的任务选项时并不需要借助用户的
短时记忆。实际上，浏览菜单和工具栏是基于人的识别功能完成的，而人们识别
事物的能力要远胜于回忆事物的能力。

可以这样理解，7\pm2理论提醒我们在进行界面设计时要尽可能减小对用户的记
忆需求，同时可考虑通过将信息放置于一定的上下文中，来减少信息单元的数目。
此外，7\pm2理论对命令行界面设计非常有用，如果某条命令附加的参数过多，则
用户记忆和使用起来就会变得比较困难。
#+end_box

识别(recognition) & 回忆(recall)
- *识别比回忆更简单*, 因为需要更多的线索.  所有的相关线索都能够激活记忆.
- 这就是为什么选择题比简答题更容易, 因为选项可以让人回忆起答案.
- 这就是为什么搜索引擎这么受欢迎的原因, 因为搜索引擎把回忆简化成了识别.

#+begin_box 例子
设想一个场景,你在街上遇到了一个人,如果你们之前见过,你可以很轻松的认出
他来,但叫出他的名字却更难一些。第一个阶段(你发现之前见过他)就叫做识别,
第二个阶段(思考他的名字)就叫做回忆。
#+end_box

** 交互设备

* Ch3 --- 交互设计的目标与原则

** 交互设计目标

可用性保证产品功能完备, 而用户体验的目的是给用户一些与众不同的使用感受,
是对用户体验质量的明确说明

*** 可用性目标

#+caption: 系统的学习曲线
{{{image(60)}}}
[[./notes/learning-curve.png]]

- 易学性: 萌新花多久能够基本上手, 最基本的可用性属性.  对应学习曲线的
  前半段, *越陡峭越易学*.
- 使用效率: 萌新变成老司机后, 使用系统的生产力水平.  指用户达到学习曲
  线上平坦阶段获得的稳定绩效水平, 对应学习曲线的后半段.
- 易记性: 一段时间不用后, 也能借助简单的提示使用系统.
  #+begin_gray
  影响易记性的因素:
  - 位置
  - 分组: 格式塔理论
  - 惯例: 使用通用的对象/符号
  - 冗余: 使用多个感知通道进行信息编码
  #+end_gray
- 低出错率:
- 主观满意度

*** 用户体验目标

** 简易可用性工程 (Usability Engineering)

*** 可用性度量 🧐

常用的可用性指标:
- 易学性: 找一些​*从未使用过系统*​的用户, 统计他们学习使用系统直至达到​_某
  种熟练程度_​的时间
  - 用户: 能够代表系统的目标用户, 区分:
    - *没有任何计算机使用经验*​的新手用户
    - *具有一般计算机使用经验*​的用户
  - 特定的熟练程度:
    - 用户能够完成某个特定的任务
    - 或用户能够在特定的时间内完成一组特定任务
    - 原因:学习曲线没有明确区分"学会和未学会"

- 使用效率
  - 效率可以描述为熟练用户达到学习曲线上平坦阶段时的稳定绩效水平
  - 并不是所有用户都能够迅速达到最终的绩效水平
    - 用户自身的原因
    - 少量系统的操作十分复杂,需要花费更多时间去学习,(一旦学会, 在使用
      系统中节省的时间往往大于学习时间。)
  - 同样要区分不同的用户群体
    - 对于有经验的用户
      - “有经验”较为正规的衡量方式是通过使用系统的小时数来定义的
      - 先使用,然后度量其绩效水平
        - eg.完成特定任务需要多少秒
        - 或为用户绘制学习曲线, 当发现用户的绩效水平在一段时间内不再提
          高时, 就认为已经达到了该用户的稳定绩效水平

- 易记性
  - 用户分类
    - 新手用户,初次使用系统
    - 熟练用户,频繁使用系统
    - 非频繁使用用户,间断使用系统,需要基于以前的使用经验回忆系统如何使用
  - 对非频繁使用用户进行测试最能体现系统的易记性
  - 度量方法
    - 对在特定长时间内没有使用系统的用户进行标准用户测试
      - 记录下这些用户执行特定任务所用的时间
    - 对用户进行记忆测试
      - 如在用户完成一个应用系统的特定任务后,让用户解释各种命令的作用,让用户
        说出对应某种功能的命令选项...
      - 以用户回答正确的问题个数对用户界面的易记性进行打分

- 错误率
  - 错误: 通常指不能实现预定目标的操作
  - 度量:
    - 在用户执行特定任务时通过统计这种操作的次数
    - 可以在度量其他可用性属性的同时来度量
  - 错误分类
    - 错误发生后能够被用户立刻纠正,不会对系统带来灾难性的影响
      - 往往会被包含在使用效率的统计当中
    - 不易于被用户发现,从而可能造成最终结果存在问题
      - 通常错误率度量中需要考虑的都是此类错误
      - 设计人员在设计时也应该将其发生的频率降到最低

- 主观满意度
  - 满意度度量评价都是主观的
    - 以询问用户的方式进行度量更合适
    - 为减少单个用户评价的主观性,把多个用户的结果综合起来取其平均值
  - 度量通常在用户测试完成后进行
    - 要求用户通过简单的调查问卷对系统打分, 可以1--5或1--7的Likert度量
      尺度或语义差异尺度作为打分标准
    - 一定要在用户使用系统执行真实的任务之后再来询问他们的看法

** 交互设计原则 🧐

基本原则:
- 可学习性
- 灵活性
- 健壮性

* Ch4 --- 交互设计过程

** 交互设计过程

- 标识用户需要并建立需求
  - 最基本活动
  - 必须了解谁是目标用户,交互式产品应提供哪些支持
  - 是设计、开发的基础
- 开发满足需求的候选设计方案
  - *核心活动*
  - 提出满足需求的构思,包括概念设计和物理设计
    - 概念设计,产品的概念模型,即产品应该做什么,如何运作,外观如何
    - 物理设计,产品的细节,即色彩、声音和图像、菜单设计、图标设计等
- 构建设计的交互式版本(原型)
  - 评价设计的最佳方法就是让用户与产品交互
  - 交互式版本不一定是能够运行的产品
    - 构建纸张原型,经济快捷,适用于设计早起阶段
    - 角色模仿,能切实体验到与产品交互时的情形
- 评估设计
  - 评估设计的可用性和可接受性
  - 用到各种评估准则, eg.用户在使用时的出错数,用户的满意度


** 交互设计生命周期 🧐

*** 传统软件生命周期模型

不适合交互式软件系统的开发.

- 瀑布模型: 线性, 最初缺少迭代, 不以用户为中心
- 螺旋模型:
  - 以降低风险为中心,将一个项目分解成若干个子项目. 不以用户为中心
  - 引入“迭代”思想(目的是找出和控制风险)
  - 鼓励考虑不同的方案并且修改存在或潜在的问题。
- 快速应用开发 (RAD): 以用户为中心
- 原型法: 先开发一个简单的版本, 再逐步改善
  - 丢弃法throw-away
    - 目标是为了​*明确需求*
    - 通过反复与客户交流和修改原型,是原型功能充分体现客户需求
    - 明确需求后,原型会被丢弃
    - 将根据明确的需求进行软件开发
  - 递增法incremental
    - “缓慢生长的系统”
    - 主要用于解决需要集成的复杂系统设计
    - 开始时系统有一个总体框架,各模块功能及结构清楚,但​*没有具体实现*
    - 总体设计+功能模块反复实现
  - 进化法evolutionary
    - 设计、实现、评估反复进行
    - 最终产品将被看成是一种各个阶段评估的版本序列
    - 需要加强版本管理和控制

*** 交互设计生命周期模型

更加灵活, 以用户为中心, *强调了评估的重要性*

- 星型生命周期模型: 没有指定任何活动的次序, 以评估为核心.
  - 两种活动模式:
    - 分析模式: 自顶向下
    - 合成模式: 自底向上
  - 不指定活动次序,但每一个活动结束时必须 “评估”
  - 模型太过灵活,很难控制开发过程、物资分配、设置目标、追踪进展等问题。
- 可用性工程生命周期模型

** 交互式设计过程管理

LUCID: Logical User-Centered Interaction Design, 以用户为中心的逻辑交
互设计

* Ch5 --- 交互式系统的需求

** 用户特性

*** 体验水平差异

多考虑永久的中间用户.

** 任务分析 🧐

层次化任务分析(HTA, Hierarchical Task Analysis )
- 结构化的客观化地描述任务与其子任务层次体系的方法
- 把任务分解为若干子任务,再把子任务进一步分解为更细致的子任务
- 之后,把他们组织成一个“执行次序”,说明在实际情形下如何执行各项任务


{{{image(80)}}}
[[./notes/hta-1.png]]

{{{image(80)}}}
[[./notes/hta-2.png]]

{{{image(80)}}}
[[./notes/hta-3.png]]

* Ch6 --- 交互式系统的设计

** 设计框架

在高层次上关注整体结构

** 设计策略

简单的产品更容易使用.

删除不必要的, 组织要提供的, 隐藏非核心的, 适当转移.
