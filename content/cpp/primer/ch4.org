#+title: Ch4 --- Expressions

An expression is composed of one or more *operands* and yields a
*result* when it is *evaluated*.

* Fundamentals

** Basic Concepts

There are both /unary operators/ and /binary operators/.  There is
also one /ternary operator/ that takes three operands, and one
operator, function call (=()=), that takes _an unlimited number of
operands_.

Understanding expressions with multiple operators requires
understanding the *precedence* and *associativity* [‰ºòÂÖàÁ∫ß&ÁªìÂêàÊÄß] of
the operators and may depend on the */order of evaluation/* of the
operands.

_As part of evaluating an expression, operands are often *converted*
from one type to another._ For example, the binary operators usually
expect operands with the same type.  These operators can be used on
operands with differing types so long as the operands can be
*converted to a common type*.

Small integral type operands (e.g., =bool=, =char=, =short=, etc.) are
generally *promoted* to a larger integral type, typically =int=.

When we use an /overloaded operator/, the meaning of the
operator---including the *type* of its operand(s) and the
result---depend on _how the operator is *defined*_.  However, the
_number of operands_ and the _precedence_ and the _associativity_ of
the operator cannot be changed.

*** Lvalues and Rvalues üßê

Áõ¥Êé•ÂÖ®ÊñáÂ§çÂà∂ üòâ

Every expression in C++ is either an *rvalue* (pronounced "are-value")
or an *lvalue* (pronounced "ell-value").  [[color:gray][These names are inherited
from C and originally had a simple mnemonic purpose: lvalues could
stand on the left-hand side of an assignment whereas rvalues could
not.]]

In C++, the distinction is less simple.  In C++, an *lvalue
expression* yields _an object or a function_.  However, some lvalues,
such as =const= objects, may not be the left-hand operand of an
assignment.  Moreover, some expressions yield objects but return them
as rvalues, not lvalues.
#+begin_red
Roughly speaking, when we use an object as an rvalue, we use the
object's *value* (its *contents*).  When we use an object as an
lvalue, we use the object's *identity* (its *location in memory*).
#+end_red

Operators differ as to whether they require lvalue or rvalue operands
and as to whether they return lvalues or rvalues.  The important point
is that we can use an lvalue when an rvalue (i.e. content) is
required, but we cannot use an rvalue when an lvalue (i.e., location)
is required.  When we use an lvalue in place of an rvalue, the
object's contents (its value) are used.  We have already used several
operators that involve lvalues.
- Assignment requires a (non-=const=) lvalue as its left-hand operand
  and yields its left-hand operand as an lvalue.
- The address-of operator requires an lvalue operand and returns a
  pointer to its operand as an rvalue.
- The built-in dereference and subscript operators and the iterator
  dereference and string and vector subscript operators all yield
  lvalues.
- The built-in and iterator increment and decrement operators require
  lvalue operands and the *prefix versions* also yield lvalues.

Lvalues and rvalues also differ when used with =decltype=.  When we
apply =decltype= to an *expression* (other than a +variable+), the
result is a reference type if the expression yields an lvalue.  As an
example, assume =p= is an =int*=.  Because dereference yields an
lvalue, =decltype(*p)= is =int&=.  On the other hand, because the
address-of operator yields an rvalue, =decltype(&p)= is =int**=, that
is, a pointer to a pointer to type =int=.
#+begin_src cpp
  // decltype of a parenthesized variable is always a reference
  decltype((i)) d; // error: d is int& and must be initialized
  decltype(i) e;   // ok: e is an (uninitialized) int
#+end_src

** Precedence and Associativity

An expression with two or more operators is a *compound expression*.
Evaluating a compound expression involves _grouping the operands to
the operators_.  Precedence and associativity determine how the
operands are grouped.

In general, the value of an expression depends on how the
subexpressions are grouped.
- Operands of operators with higher precedence group more tightly than
  operands of operators at lower precedence.
- Associativity determines how to group operands with the same
  precedence.

** Order of Evaluation üßê

*Precedence specifies how the operands are /grouped/*.  It says
nothing about the */order/* in which the operands are evaluated.  In
most cases, the order is largely *unspecified*.  In the following
expression
#+begin_src cpp
  int i = f1() * f2();
#+end_src
we know that =f1= and =f2= must be called before the multiplication
can be done.  After all, it is their results that are multiplied.
However, we have *no way* of knowing _whether =f1= will be called
before =f2= or vice versa_.

For _operators that *do not* specify evaluation order_, it is an error
for an expression to /refer to *and change*/ the same object.
Expressions that do so have undefined behavior.  The following output
expression is undefined:
#+begin_src cpp
  int i = 0;
  cout << i << " " << ++i << endl; // undefined
#+end_src
Because this expression has undefined behavior, the program is in
error, regardless of what code the compiler generates.

There are four operators that do *guarantee* the order in which
operands are evaluated.  The logical AND (=&&=) operator guarantees
that its left-hand operand is evaluated first.  Moreover, we are also
guaranteed that the right-hand operand is evaluated only if the
left-hand operand is true.  The only other operators that guarantee
the order in which operands are evaluated are the logical OR (=||=)
operator, the conditional (=? :=) operator, and the comma (=,=)
operator.

#+begin_box Grouping ‚â† Order of Evaluation
Order of operand evaluation is *independent of* /precedence/ and
/associativity/.  In an expression such as =f() + g() * h() + j()=:

- /Precedence/ guarantees that the results of =g()= and =h()= are
  multiplied.
- /Associativity/ guarantees that the result of =f()= is added to the
  product of =g()= and =h()= and that the result of that addition is
  added to the value of =j()=.
- There are no guarantees as to the /order/ in which these functions
  are called.
#+end_box

Order of evaluation for most of the binary operators is left undefined
to give the compiler _opportunities for optimization_.  This strategy
presents a *trade-off* between efficient code generation and potential
pitfalls in the use of the language by the programmer.

* Arithmetic Operators

{{{image(80)}}}
[[./ch4/arithmetic-operators.jpg]]

The *operands* and *results* of these operators are *rvalues*.
Operands of small integral types are *promoted* to a larger integral
type, and all operands may be converted to a common type as part of
evaluating these operators.

In a division, a nonzero quotient is positive if the operands have the
same sign and negative otherwise.  The new standard requires the
quotient to be *rounded toward zero*.  The modulus operator is defined
so that if =m= and =n= are integers and =n= is nonzero, then
=(m/n)*n + m%n= is equal to =m=.  By implication, if =m%n= is nonzero,
it has *the same sign as =m=* [‰ΩôÊï∞‰∏éË¢´Èô§Êï∞ÂêåÂè∑].  Except for the
obscure case where =-m= overflows, =(-m)/n= and =m/(-n)= are always
equal to =-(m/n)=, =m%(-n)= is equal to =m%n=, and =(-m)%n= is equal
to =-(m%n)=. More concretely:
#+begin_src cpp
   21 % 6;  /*  3 */     21 / 6;  /*  3 */
   21 % 7;  /*  0 */     21 / 7;  /*  3 */
  -21 % -8; /* -5 */    -21 / -8; /*  2 */
   21 % -5; /*  1 */     21 / -5; /* -4 */
#+end_src

#+begin_details ‰ΩôÊï∞‰∏éË¢´Èô§Êï∞ÂêåÂè∑
ÁªÑÂéüÈáåÈù¢ÁöÑÈô§Ê≥ï‰πüÊòØÈÖ±,ËßÅ [[http:/blog/content/poco/ch3-calculation.org][=/poco/ch3-calculation.org=]]:
#+begin_quote
‰ΩøÁî®Áü´Ê≠£Ê≥ïÂêé,ËøòÈúÄÁü´Ê≠£‰ΩôÊï∞. ‰ΩôÊï∞ÂíåË¢´Èô§Êï∞Â∫îËØ•ÂêåÂè∑,Ëã•ÂºÇÂè∑ÂàôÈúÄÁü´Ê≠£.
- $x,y$ ÂêåÂè∑, $r,y$ ÂºÇÂè∑Êó∂ $r + y$
- $x,y$ ÂºÇÂè∑, $r,y$ ÂêåÂè∑Êó∂ $r - y$
#+end_quote
#+end_details

* Logical and Relational Operators

The operands to these operators are *rvalues* and the result is an
*rvalue*.

The logical AND and OR operators always _evaluate their left operand
before the right_.  Moreover, the right operand is evaluated if and
only if the left operand *does not determine the result*.  This
strategy is known as *short-circuit evaluation*.

It is usually a bad idea to use the boolean literals =true= and
=false= as operands in a comparison.  These literals should be used
only to compare to an object of type =bool=.
#+begin_src cpp
  int val = 10;
  if (val == true) { /* . . . */ } // true only if val is equal to 1!
#+end_src
If val is not a =bool=, then _=true= is converted to the type of
=val=_ before the ==== operator is applied.  That is, when =val= is
not a =bool=, it is as if we had written
#+begin_src cpp
  if (val == 1) { /* . . . */ }
#+end_src

* Assignment Operators üßê

The left-hand operand of an assignment operator must be a *modifiable
lvalue*.  The result of an assignment is its left-hand operand, a
modifiable lvalue.

Assignments often occur in conditions.  Because assignment has
relatively *low precedence*, we usually must _parenthesize the
assignment for the condition to work properly_:
#+begin_src cpp
  while ((i = get_value()) != 42) { /* . . . */ }
#+end_src

In an compound assignment (e.g. =+==, =*==), the left-hand operand is
*evaluated only once*.  If we use an ordinary assignment, that operand
is evaluated *twice*: once in the expression on the right-hand side
and again as the operand on the left hand.  In many, perhaps most,
contexts this difference is immaterial aside from possible performance
consequences.

* Increment and Decrement Operators

There are two forms of these operators: /prefix/ and /postfix/.  So
far, we have used only the prefix form.  This form increments (or
decrements) its operand and yields the *changed /object/* as its
result.  The postfix operators increment (or decrement) the operand
but yield a *copy* of the original, *unchanged /value/* as its result.

These operators require *lvalue operands*.  The prefix operators
return the object itself as an *lvalue*.  The postfix operators return
a *copy* of the object's original value as an *rvalue*.

** Combining Dereference and Increment in a Single Expression

#+begin_src cpp
  auto pbeg = v.begin();
  while (pbeg != v.end() && *beg >= 0)
      cout << *pbeg++ << endl;
#+end_src

The precedence of postfix increment is higher than that of the
dereference operator, so =*pbeg++= is equivalent to =*(pbeg++)=.

** Remember That Operands Can Be Evaluated in Any Order üßê

Most operators give *no guarantee* as to the *order* in which operands
will be evaluated.  This lack of guaranteed order often doesn‚Äôt
matter.  The cases where it does matter are when one subexpression
*changes the value* of an operand that is _used in another
subexpression_.  Because the increment and decrement operators change
their operands, it is easy to misuse these operators in compound
expressions.

For example, this is ok:
#+begin_src cpp
  for (auto it = s.begin(); it != s.end() && !isspace(*it); ++it)
      ,*it = toupper(*it); // capitalize the current character
#+end_src
but this is VERY WRONG:
#+begin_src cpp
  // the behavior of the following loop is undefined!
  while (beg != s.end() && !isspace(*beg))
      ,*beg = toupper(*beg++);     // error: this assignment is undefined
#+end_src
The problem is that in the second version, *both* the left- and
right-hand operands to === use =beg= and the right-hand operand
*changes* =beg=.  The assignment is therefore undefined.

In comparison, =&&= defines order of evaluation, so this is ok
(although bad style):
#+begin_src cpp
  ival++ && ival;
#+end_src
Again, =<== has no order, so this is undefined:
#+begin_src cpp
  vec[ival++] <= vec[ival];
#+end_src
When used in =<==, the compiler generates a warning:
#+begin_src text
Unsequenced modification and access to 'ival'
#+end_src

* The Member Access Operators

The arrow operator (=->=) requires a pointer operand and yields an
*lvalue*.  The dot operator (=.=) yields an lvalue if the object from
which the member is fetched is an lvalue; otherwise the result is an
rvalue.

#+begin_src cpp
  vector<string> v {"the", "best", "tv"};
  auto it = v.begin();
  it++->empty();  // equivalent to (*it).empty(); ++it;
                  // or (*it++).empty();
#+end_src

* The Conditional Operator

The conditional operator (=?:=) lets us embed simple if-else logic
inside an expression.  The conditional operator has the following
form:
#+begin_src cpp
  cond ? expr1 : expr2;
#+end_src
where =cond= is an expression that is used as a condition and =expr1=
and =expr2= are expressions *of the same type* (or types that can be
*converted to a common type*).

That result of the conditional operator is an lvalue if _both
expressions are lvalues_ or if they _convert to a common lvalue type_.
Otherwise the result is an rvalue.

#+begin_red
üòØ The conditional operator has *fairly low precedence*.  When we
embed a conditional expression in a larger expression, we usually must
parenthesize the conditional subexpression.
#+end_red
#+begin_src cpp
  cout << ((grade < 60) ? "fail" : "pass"); // prints pass or fail
  cout << (grade < 60) ? "fail" : "pass";   // prints 1 or 0!
  cout << grade < 60 ? "fail" : "pass"; // error: compares cout to 60
#+end_src

* The Bitwise Operators

As usual, if an operand is a "small integer", its value is first
*promoted* to a larger integral type.  The operand(s) can be either
signed or unsigned.

If the operand is signed and its value is negative, then the way that
the "sign bit" is handled in a number of the bitwise operations is
*machine dependent*. _Moreover, doing a left shift that changes the
value of the sign bit is undefined._

[[remark:thebesttv][
ÊàëËßâÂæóËøôËæπÊú™ÂÆö‰πâÁöÑÂéüÂõ†ËøòÊòØÊ†áÂáÜÊ≤°ÊúâËßÑÂÆöÊï¥Êï∞ÁöÑË°®Á§∫,
ÊâÄ‰ª•Â∑¶ÁßªÂêéÁöÑÂÄºÂ∞±Âèà‰∏çÁ°ÆÂÆö‰∫Ü ü§î
]]

Because there are no guarantees for how the sign bit is handled, we
strongly recommend using =unsigned= types with the bitwise operators.

** Bitwise Shift Operators

The right-hand operand must *not be negative* and must be a value that
is *strictly less than* the number of bits in the result.  Otherwise,
the operation is undefined.

The behavior of the right-shift operator (=>>=) depends on the type of
the left-hand operand: If that operand is unsigned, then the operator
inserts 0-valued bits on the left; if it is a signed type, the result
is *implementation defined*---either copies of the sign bit or
0-valued bits are inserted on the left.

The shift operators have *midlevel precedence*: lower than the
arithmetic operators but higher than the relational, assignment, and
conditional operators.
#+begin_src cpp
  cout << 42 + 10;   // ok: + has higher precedence, so the sum is printed
  cout << (10 < 42); // ok: parentheses force intended grouping; prints 1
  cout << 10 < 42;   // error: attempt to compare cout to 42!
#+end_src
The last =cout= is interpreted as
#+begin_src cpp
(cout << 10) < 42;
#+end_src

* The =sizeof= Operator

The =sizeof= operator returns the size, in bytes, of an *expression*
or a *type name*.  The operator is right associative. The result of
sizeof is a *constant expression* of type =size_t=.  The operator
takes one of two forms:
#+begin_src cpp
  sizeof (type)
  sizeof  expr
#+end_src
In the second form, =sizeof= returns the size of the type returned by
the given expression.  The =sizeof= operator is unusual in that it
*does not evaluate* its operand.

=sizeof= an array is the size of *the entire array*.  Note that
=sizeof= _does not convert the array to a pointer_.

Because =sizeof= returns the size of the entire array, we can
determine the number of elements in an array by dividing the array
size by the element size.  And because =sizeof= returns a *constant
expression*, we can use the result of a =sizeof= expression to specify
the dimension of an array.
#+begin_src cpp
  constexpr size_t sz = sizeof(ia) / sizeof(*ia);
  int arr2[sz];
#+end_src

* Comma Operator

The comma operator (=,=) takes two operands, which it evaluates *from
left to right*.  Like the logical AND and logical OR and the
conditional operator, the comma operator *guarantees the order* in
which its operands are evaluated.

The left-hand expression is evaluated and its result is discarded.
The result of a comma expression is the value of its right-hand
expression.  The result is an lvalue if the right-hand operand is an
lvalue.

* Type Conversions üßê

Two types are related if there is a *conversion* between them.

Rather than attempt to add values of the two different types, C++
defines a set of *conversions* to transform the operands to a *common
type*.  These conversions are carried out automatically without
programmer intervention---and sometimes without programmer knowledge.
For that reason, they are referred to as *implicit conversions*.

The implicit conversions among the arithmetic types are defined to
*preserve precision*, if possible.

The compiler automatically converts operands in the following
circumstances:
- In most expressions, values of integral types smaller than =int= are
  first *promoted* to an appropriate larger integral type.
- In conditions, non-=bool= expressions are converted to =bool=.
- In initializations, the initializer is converted to the type of the
  variable; in assignments, the right-hand operand is converted to the
  type of the left-hand.
- In arithmetic and relational expressions with operands of mixed
  types, the types are converted to a *common type*.
- Conversions also happen during function calls.

** The Arithmetic Conversions

More generally, in expressions that mix floating-point and integral
values, the integral value is converted to an appropriate
floating-point type.

*** Integral Promotions üßê

The integral promotions convert the small integral types to a larger
integral type.  The types =bool=, =char=, =signed char=, =unsigned
char=, =short=, and =unsigned short= are promoted to =int= if all
possible values of that type fit in an int.  Otherwise, the value is
promoted to =unsigned int=.

The larger =char= types (=wchar_t=, =char16_t=, and =char32_t=) are
promoted to the smallest type of =int=, =unsigned int=, =long=,
=unsigned long=, =long long=, or =unsigned long long= in which all
possible values of that character type fit.

** Other Implicit Conversions

*Array to Pointer Conversions*: In most expressions, when we use an
array, the array is automatically converted to *a pointer to the first
element in that array*.  This conversion is *not* performed when an
array is used with =decltype= or as the operand of the address-of
(=&=), =sizeof=, or =typeid= operators.  The conversion is also
omitted when we initialize a reference to an array.

*Conversions Defined by Class Types*: Class types can define
conversions that the compiler will apply automatically.  The compiler
will apply *only one* class-type conversion at a time.

We use a class-type conversion when we use a C-style character string
where a library =string= is expected and when we read from an
=istream= in a condition:
#+begin_src cpp
  string s, t = "a value"; // character string literal converted to type string
  while (cin >> s)         // while condition converts cin to bool
#+end_src

** Explicit Conversions

We use a *cast* to request an _explicit conversion_.  Although
necessary at times, casts are inherently *dangerous* constructs.

*** Named Casts

A named cast has the following form:
#+begin_src cpp
cast-name<type>(expression);
#+end_src
where =type= is the target type of the conversion, and =expression= is
the value to be cast.  If =type= is a *reference*, then the result is
an *lvalue*.  The =cast-name= may be one of =static_cast=,
=dynamic_cast=, =const_cast=, and =reinterpret_cast=.  The =cast-name=
determines what kind of conversion is performed.

**** =static_cast=

Any well-defined type conversion, other than those involving low-level
=const=, can be requested using a =static_cast=.
#+begin_src cpp
  int i, j;
  double d = static_cast<double>(i) / j;

  void *p = &d;
  double *dp = static_cast<double*>(p);
#+end_src

**** =const_cast=

A =const_cast= changes only a *low-level =const=* in its operand:
#+begin_src cpp
  const char *pc;
  char *p = const_cast<char*>(pc); // ok: but writing through p is undefined
#+end_src
Once we have cast away the =const= of an object, the compiler will no
longer prevent us from writing to that object.  If the object was
originally not a =const=, using a =cast= to obtain write access is
legal.  However, using a =const_cast= in order to write to a =const=
object is *undefined*.

**** =reinterpret_cast=

A =reinterpret_cast= generally performs a _low-level reinterpretation
of the *bit pattern* of its operands_.

A =reinterpret_cast= is inherently *machine dependent*.  Safely using
=reinterpret_cast= requires completely understanding the types
involved as well as the details of how the compiler implements the
cast.
