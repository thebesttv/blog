#+title: OS

#+options: num:nil

- [[http://jyywiki.cn/OS/2022/][操作系统：设计与实现 (2022 春季学期)]]

* OSTEP

- [[https://pages.cs.wisc.edu/~remzi/OSTEP/][Operating Systems: Three Easy Pieces]]
- [[https://github.com/remzi-arpacidusseau/ostep-projects][ostep-projects]] Projects for an undergraduate OS course
- [[https://github.com/remzi-arpacidusseau/ostep-code][ostep-code]] Code from various chapters in OSTEP
- [[https://github.com/remzi-arpacidusseau/ostep-homework][ostep-homework]] Homeworks

* Linux

- [[https://natanyellin.com/posts/life-and-death-of-a-linux-process/][Life and Death of a Linux Process]]
  A first-order approximation of the life and death of a process on Linux.

* Concurrency

- [[https://github.com/papers-we-love/papers-we-love/blob/master/distributed_systems/solution-of-a-problem-in-concurrent-programming-control.pdf][Solution of a Problem in Concurrent Programming Control - Dijkstra]]
  （并看不懂

** Semaphore

- [[https://greenteapress.com/wp/semaphores/][The Little Book of Semaphores]]

** Memory Model

- [[https://www.cs.utexas.edu/~bornholt/post/memory-models.html][Memory Consistency Models: A Tutorial]] 很棒的介绍

-----
以下是复习考试用的...

* Ch1 概述

背
- *并发*,共享,虚拟,异步
- 最基本的特征: 并发&共享

操作系统的基本特征
- *并发*: 并发 (concurrency, 在同一时间段发生) \neq 并行 (parallel, 同一
  时刻并行).  单处理器: 宏观并发, 微观交替执行
- *共享*:
- 虚拟: 将一个物理实体映射为多个逻辑实体, 提高资源利用率 (virtualize CPU
  & memory)
- 异步: 即不确定性, 进程执行的时间&顺序难以确定, bug难以重现

最基本的特征: 并发&共享, 互为存在条件

- 单道批处理
  - 提高吞吐量
  - 问题: CPU&IO忙闲不均, 不能很好利用系统资源
- 多道批处理
  - 内存中同时存放多个作业
  - 宏观并行, 微观串行
  - 资源利用率高, 作业吞吐量大
  - 问题: 交互性差
- 分时
  - 多个用户共享
  - 时间片
- 实时

两个模式: PSW(程序状态字)增加模式位
- 用户模式(user mode, 用户态, 目态)
- 内核模式(monitor mode, 监控模式, 系统模式, 特权模式, 管态)

*特权指令*
- IO: 所有IO指令都是特权指令, 如启动, 测试, 控制IO等
- 特殊的寄存器
  - PSW & 目态管态互换
  - base/limit 基地址&界限地址寄存器
- 中断: 缺页中断, 时钟中断
- 进程调度

- 硬中断（interrupt）：外部中断，一般就是其它硬件设备发来的，例如时钟，
  硬盘，键盘，网卡等，它们可以被屏蔽；
- 软中断（soft int）：严格来说这不是中断，因为这是 *由 int 指令主动触发的*,
  最常用的就是系统调用，这是用户主动请求进入 kernel 态的方式；它的处理机
  制和其它中断是一样的，所以也归在中断里；

* Ch2

- 线程考, 管程不考

- 顺序执行
  - 顺序, 封闭(独占全部资源), 可再现(初始条件相同则结果相同)
- 并发执行

进程包括
- 代码段和数据段
- 通用寄存器, PC等
- 系统资源
  - 打开的文件
  - 设备

- 通过多次执行,一个程序可产生多个进程
- 通过调用关系,一个进程可包括多个程序

PCB是进程存在的唯一标志, PCB包含
- 进程描述信息
  - 进程标识符, 进程名
  - 父进程
  - 拥有该进程的用户
- 处理机状态信息(保存进程运行现场)
  - 通用寄存器
  - PC
  - PSW(程序状态字)
  - 中断屏蔽标志
  - 用户栈指针 (用户进程拥有的系统栈,存放过程和系统调用参数及调用地址)
- 进程调度信息
  - 进程当前状态
  - 优先级
  - 运行统计(执行时间、页面调度)
  - 事件: 阻塞原因等
- 进程控制信息
  - 程序段, 数据段地址
  - 进程间同步和通信
  - 资源占用信息(除CPU外的进程所需的全部资源及已分配资源清单)
  - 链接指针(本进程所在队列的下一个进程的PCB首地址)

进程状态图!!!

进程管理中最基本功能是 *进程控制*
- 进程的创建、终止、进程状态的转变

引起创建进程的事件
- 系统初始化
  - 分时系统中用户登录
  - 批处理系统中作业调度
- 提供服务
  - 用户请求创建进程
- 应用请求
  - 正在运行的进程执行了创建进程的系统调用

如果父进程终止,操作系统不再允许子进程继续执行

引起阻塞和唤醒的事件
- 请求系统服务
- 启动某种操作
- 新数据尚未到
- 无新工作可做
- 内存不够(等待内存)

唤醒(阻塞->就绪)
- 原因: 等待的事件到达
- 由阻塞队列转入就绪队列

进程的挂起与激活
- 挂起
  - 从内存调到外存,改变进程的状态
  - 活动就绪 -> 静止就绪
  - 活动阻塞 -> 静止阻塞
  - 正在执行 -> 重新调度
- 激活
  - 从外存调入内存,改变进程的状态
  - 可能也会引起处理机调度

静止就绪, 静止阻塞, 就绪, 阻塞, 运行,

- 静止就绪: 进程在外存,但只要进入内存即可运行
- 静止阻塞: 进程在外存,并等待某事件的出现


进程之间两种制约关系
- 间接制约: 进程间由于 *共享* 某种系统资源,而形成的相互制约
- 直接制约: 进程间由于 *合作* 而形成的相互制约

进程的两大关系
- 同步: 先A后B.
  多个进程中发生的事件存在某种 *时序关系*,必须协同工作、相互配合,以共同完成一项任务。
- 互斥: A xor B.
  由于共享资源所要求的排他性,进程间要相互竞争,以获得这些资源的使用权

临界资源: 硬件或软件,多个进程在对其进行访问时,必须互斥地进行

- 进入区: 检查临界资源是否能访问
- 临界区: 访问临界资源的代码
- 退出区: 将临界区标志设为未访问
- 剩余区

同步机制应遵循的准则:
- 有空让进: 其他进程均不处于临界区时,应允许请求进入临界区的进程进入
- 忙则等待: 已有进程处于其临界区,请求进入临界区的进程应等待
- 有限等待: 等待进入临界区的进程不能“死等”
- 让权等待: 不能进入临界区的进程,应释放CPU(如转换到阻塞状态)

三种简单的算法&问题(见笔记 vid ch3)
- 只用 turn: 保证互斥, 不保证有空让进
- 只用 flag: 保证互斥, 可能死锁
- turn + flag: 保证互斥

信号量
- 整型
  - P / wait(S)
    #+begin_src c
      while (S <= 0);
      S--;
    #+end_src
  - V / signal(S)
    #+begin_src c
      S++;
    #+end_src
  - spin lock, 不满足让权等待
- 记录型
  - count >= 0 时, 表示可用资源数目
  - count < 0  时, 绝对值表示阻塞进程数目
  #+begin_src c
    struct {
      int count;                    // 资源数目
      struct process *queue;        // 等待队列
    };
    wait(S) {
      --s.count;
      if (s.count < 0)
        block(s.queue);
    }
    signal(S) {
      ++s.count;
      if (s.count <= 0)
        wakeup(s.queue);
      }
  #+end_src

使用信号量实现
- 互斥: 初值为1
- 同步: 初值为0

线程
- 可以并发执行
- 共享地址空间
- 共享内存和文件资源
- 线程是处理机调度的单位
- *一个线程崩溃,会导致其所属进程的所有线程崩溃*
- 线程同样具有就绪、阻塞和执行三种基本状态

TCB
- PC, 寄存器
- 栈

- 进程是资源分配的单位(如存储器、打开文件等,不含处理机)
- 线程是处理机调度单位

- 用户级线程: 仅存在用户空间中, 内核不知道
  - 内核分配时间给进程, 进程再分给线程
  - 一个线程因为发起syscall而block, 则整个进程都block
- 内核级线程: 线程由内核管理
  - 内核直接分配时间给线程
  - 一个线程block不影响其他的

** 信号量作业

*先等资源再等互斥!!!*

*** ex1

某图书馆阅览室供市民阅读书籍。该阅览室座位为50个，最多只供50位市民同时在其中阅读书籍。并且，为确保阅览室干净整洁的环境，需要有清洁人员对阅览室进行清扫。该阅览室规定如下：
1. 若阅览室有空座，市民可以进入阅览室读书；
2. 阅览室坐满后，若还有市民要使用阅览室需排队等待，只有阅览室出现空位才可进入；
3. 如果有市民在阅览室读书，不允许清洁人员进入阅览室进行清扫；如果正在清扫阅览室，不允许市民进入阅览室读书；
4. 一位清洁人员对阅览室进行清扫时，其他清洁人员不允许进入清扫阅览室。

限制读者数的读者写者问题.
比原始问题多一个 =semaphore read=50= 用来限制人数即可.

#+begin_src cpp
  int readcount = 0;              // 统计进入阅览室的市民人数
  semaphore mutex = 1,            // readcount 的互斥量
            clean = 1,            // clean 控制市民与清洁人员之间的互斥
            read = 50;            // read 控制市民进入阅览室的人数

  // 市民
  void reader() {
    while (true) {
      wait(read);                 // 先检查数量
      wait(mutex);                // 再看mutex
      if (readcount == 0) {
        wait(clean);
      }
      readcount++;
      signal(mutex);
      // 读书
      wait(mutex);
      readcount--;
      if (readcount == 0) {
        signal(clean);
      }
      signal(mutex);
      signal(read);
    }
  }

  // 清洁人员
  void cleaner() {
    while (true) {
      wait(clean);
      // 打扫
      signal(clean);
    }
  }
#+end_src

*** ex2

某幼儿园中班，两位老师和30位小朋友玩剪纸游戏。
- 教师A剪小猪耳朵放入纸箱里，教师B负责剪小猪身体放入纸箱中，小朋友从箱里找到两个猪耳朵和一个猪身体的剪纸把它们粘在一起。
- 为了便于小朋友识别，纸箱中共有50个小隔间，每个隔间可以放一个猪身体或一个猪耳朵的剪纸。
- 一次只能有一人向纸箱里放剪纸或从纸箱中取走剪纸。
- 为了防止纸箱中都是猪耳朵或都是猪身体的剪纸，造成死锁，专门定义了信号量S1控制纸箱中猪耳朵剪纸的数量，S2控制猪身体剪纸的数量。

有两种资源的生产者消费者, 多加 =S1=, =S2= 防止死锁.

#+begin_src cpp
  semaphore mutex = 1;            // 一个纸箱
  semaphore empty = 50;           // 50个隔间
  semaphore ear = 0;              // 初始纸箱中没有耳朵
  semaphore body = 0;             // 初始纸箱中没有身体
  semaphore S1 = 49;              // 控制耳朵的最大值
  semaphore S2 = 48;              // 控制身体的最大值


  void A() {
    while (true) {
      P(empty);
      P(S1);
      P(mutex);
      // 把耳朵放入纸箱
      V(mutex);
      V(ear);
    }
  }

  void B() {
    while (true) {
      P(empty);
      P(S2);
      P(mutex);
      // 把身体放入纸箱
      V(mutex);
      V(body);
    }
  }

  void kid(){
    while (true) {
      P(body);
      P(mutex);
      // 拿一个身体
      V(mutex);
      V(empty);
      V(S2);

      P(ear);
      P(ear);
      P(mutex);
      // 拿两个耳朵
      V(mutex);
      V(empty);
      V(empty);
      V(S1);
      V(S1);
    }
  }
#+end_src

*** ex3

办公室有一个文件格，专门存放整包的A3和A4打印纸，所有人都可以使用该文件格。每次放纸时只能放入一包A3或A4纸，每次取纸时只能取一包A3或A4纸，放纸和取纸不能同时进行。初始时文件格是空的。由于文件格容量为10，因此要求A3纸和A4纸的包数总和小于10。下面分别给出了放纸和取纸过程的不完全的过程描述，以及所需信号量及初值，请用P、V操作填空。

互斥信号量mutex=1;

每次放纸时只能放入一包A3或A4纸，每次取纸时只能取一包A3或A4纸，放纸和取纸不能同时进行。

三个资源信号量

full3是A3“满”数目，初值为0， full4是A4“满”数目，初值为0， empty是文件柜“空”数目，初值为10：
#+begin_src cpp
  full3 + full4 + empty == 10
#+end_src

- 只要文件柜未满empty>0，A3和A4纸均可放入；
- 只要A3未空full3>0，便可取走A3纸；
- 只要A4未空full4>0，便可取走A4纸

#+begin_src cpp
  semaphone empty=10, full3=0, full4=0, mutex=1;

  // 放纸
  while (true) {
    P(empty);
    if (A3) {
      P(mutex);
      // 放A3纸
      V(mutex);
      V(full3);
    } else {
      P(mutex);
      // 放A4纸
      V(mutex);
      V(full4);
    }
   }

  // 取纸
  while (true) {
    if (A3) {
      P(full3);
      P(mutex);
      // 取A3纸
      V(mutex);
    } else {
      P(full4);
      P(mutex);
      // 取A4纸
      V(mutex);
    }
    V(empty);
   }
#+end_src



* Ch3 处理机调度与死锁

- 没看
  - 多级反馈
  - 资源分配图
- 作业3.1再做一遍

- 高级调度(长期调度,作业调度): 外存的作业 \to 内存的就绪队列
- 中级调度: 挂起(内存swap到外存), 对换(外存swap到内存)
- 低级调度(短期调度,进程调度): ready \to running
  - 非抢占式: 正在运行的进程由于
    - 正常结束
    - 异常
    - 调用syscall, 如
      - 提出IO请求
    - 进行阻塞操作等

    OS才重新调度
  - 抢占式: 分时

** 死锁

产生死锁的条件 (需要全部满足)
- 互斥
- 请求保持: 进程A保持(hold)了一个资源, 又请求一个新的, 而那个新的被B保持
- 不剥夺: 进程已占用的资源不能被剥夺
- 环路等待: A等B, B等A, 成环

* Ch4

区分抖动&belady

* Ch5

- 缓冲区
- 设备分配
- 驱动
- 虚拟设备&设备独立性

设备分配时指根据用户的I/O请求分配所需的设备。

从设备特性来看，采用下述三种使用方式的设备分别称为独占设备，共享设备和虚拟设备：
- 独占式使用设备
- 分时共享设备，如磁盘的I/O，各进程的每次I/O操作请求可以通过分时来交替进行
- 以SPOOLing方式使用外部设备。SPOOLing即假脱机I/O技术，这种技术对设备的操作，
  其实就是对I/O操作进行批处理，是一种 *以空间换时间* 的技术。
