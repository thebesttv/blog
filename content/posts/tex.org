#+title: TeX note

* Control Sequence

- control word: an escape character followed by one or more /letters/,
  terminated by either a space or a nonletter. A letter means =a...z=
  and =A...Z=. The digits =0...9= are *not* letters.
  #+begin_src tex
    \input MS                       % this reads file MS.tex
  #+end_src
- control symbol: an escape character followed by a /nonletter/ (only
  one).  So there's no need to put anything after it to indicate
  separation.
  #+begin_src tex
    George P\'olya and Gabor Szeg\"o.
    \\                              % this is also a control symbol
  #+end_src

A space after a control word merely indicates separation. It is not
printed.  But a space after a control symbol is printed.  Also, since
TeX treats multiple spaces as a single space, using two spaces after a
control word makes no difference.  To use print a space after a
control word, use /control space/, i.e. an escape character followd by
a space: =\⎵=.  As an example, to print the sentence "TeX ignores
spaces after control words.", you need to write:
#+begin_src tex
  \TeX\ ignores spaces after control words.
#+end_src
Otherwise, it would be "TeXignores spaces after control words." (no
space after TeX).

* Font

- =\rm= switches to the normal "roman" typeface.
- =\sl= switches to a slanted roman typeface.
- =\it= switches to italic style.
- =\tt= switches to a typewriter-like face.
- =\bf= switches to an extended boldface style.

Use grouping to avoid using many =\rm='s to return to regular font.
#+begin_src tex
  to be {\bf bold} or to {\sl emphasize} something
#+end_src

Also, the =\/= tells TeX to add an "italic correction" to the previous
letter.  Use this just before switching from slanted or italic to
roman or bold.
#+begin_src tex
  {\it italics\/} for {\it emphasis}.

  {\it This is how you typeset a\/ {\rm roman} word in the midst of an
  italicized sentence.}
#+end_src

* Grouping

#+begin_src tex
  This \TeX\ uses control space.
  This grouped {\TeX} does not absorb space.
  As does \TeX{} like this.
#+end_src

A note about ligature, in the word "shelfful", normally you don't want
the 'ff' ligature:
#+begin_src tex
  shelfful                        % ff ligature

  shelf{}ful                      % uses grouping to avoid ligature

  {shelf}ful                      % is also works
#+end_src

However, TeX will reinsert the ff ligature by itself after hyphenating
=shelf{}ful=.  The better way is:
#+begin_src tex
  shelf\/ful                      % a bit too much

  shelf{\kern0pt}ful              % best
#+end_src

Grouping is also used to determine how much of the text is to be
governed by certain control sequences.
#+begin_src tex
  \centerline{This information should be {\it centered}.}
#+end_src
=\centerline= is outside the grouping, while =\it= is inside.  This is
because =\centerline= is a control sequence that applies only to the
*very next thing* (only one symble, not even a whole word) that
follows, so you need to group the whole text (unless the text consists
of *a single symbol* or control sequence).  The braces serves to
_treat several words of the text as a single object_.  For example,
#+begin_src tex
  \centerline This is center.
#+end_src
will only center the *one symbol* 'T', the rest 'his is center.' will
be on the next line, not centered.  But these are fine:
#+begin_src tex
  \centerline\TeX
  \centerline \TeX
  \centerline{\TeX\ has groups}
#+end_src

On the other hand, =\it= is a control sequence that simply means
"change the current font"; it acts without looking ahead, so it
affects everything that follows.  The braces surround =\it= in order
to *confine* the font change to a local reigon.

* Spaceing

- A =<return>= is like a space.
- Two spaces in a row count as one space.
- A blank line denotes the end of a paragraph.

TeX treats the end of a line as if it were a blank space.  So be
careful with hyphens and dashes.

#+begin_src tex
  % this produces spaces after em-dash
  he preferred to be called---
  was happiest when he was at work

  % this is fine
  he preferred to be called---was
  happiest when he was at work

  % using '%' right after em-dash is also fine
  he preferred to be called---%
  was happiest when he was at work

  % but a space before '%' is not fine
  he preferred to be called--- %
  was happiest when he was at work
#+end_src

Another example of comment:
#+begin_src tex
  A fool with a spread%
  sheet is still a fool.
#+end_src
There is no space between "spread" and "sheet".

Page 33 of /TeX for the impatient/:
TeX does not add the extra space if the punctuation mark follows a
capital letter, because it assumes the capital letter to be an initial
in someone's name.  To force the extra space, use =\null=, which
doesn't produce any output but separates the capital letter with
punctuation.

#+begin_src tex
  % no extra space
  A computer from IBM? Cool!

  % still no extra space
  A computer from IBM{}? Cool!

  % has extra space
  A computer from IBM\null? Cool!
#+end_src

On the other hand, you can cancel the extra space where it doesn't
belong by typing a control space =\⎵= after the punctuation mark.  You
can also use tie (=~=).

#+begin_src tex
  % TeX adds extra spaces
  Proc. Royal Acad. of Twits.

  % no extra spaces
  Proc.\ Royal Acad.\ of Twits.

  % no extra space & no linebrak
  Proc.~Royal Acad.~of Twits.
#+end_src

Here, =\thinspace= separates the single quotation mark with the double
quotation mark.
#+begin_src tex
  ``Talk, child,'' said the Unicorn.
  She said, ``\thinspace`Enough!', he said.''
#+end_src

* Boxes & Glue

Glue has 3 attributes: its natural /space/, ability to /stretch/ and
/shrink/.  The process of determining glue thickness when a box is
being made from a horizontal or vertical list is called /setting the
glue/.  Glue will never shrink more than its stated shrinkability, but
is allowed to stretch arbitrarily far, despite its /stretch/.
